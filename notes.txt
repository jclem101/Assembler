assembler

using command prompt

in subdirectory

1.RTM.exe 
2.TASM.exe
3.TD
4.TLINK
 
C:\Assembler\
must have only these

keep programs in same file in thumbdrive and dont need to worry about path

type in "cd\" then "cd assembler" then "dir"

edit "projectfilename.asm" --- opens assembler IDE

assembler is line oriented, does not utilize brackets.

--semicolon is comment
--"pseudo-op words" all in caps, ".MODEL SMALL" tells program is not huge
--do not use .586
--.STACK 100h, tells program you want 100 hex bytes for your stack 100 hex bytes =  256 bytes ascii set, , stack is = to order of operation? every stack entry is 2 bytes, 2 registry commands, so 100h is equal to 128 commands.
1 ascii = 1 byte
--ascii char set is the one that assembler uses 
--assembler is not case sensitive
--names/labels are limited to 8 characters
--.DATA is where you create variables, but dont use variables often, most usually for strings, dont really need variables. STack and registers substitute.
--10 = line feed, 13 = carraige return
--10 is like pressing return, carraige return is returnign cursor to left of screen
--.CODE, in proc's short for procedure.

-- label  
mov ax, @data == 
ax= registry label
ax = destination
@data = source
mov(ing) @data to ax

ds = data segment

dx = is where the bios looks for messages 

OFFSET message is where we stored our message

int = interrupt 21h equals 21 hex

'$' tells when string is done

al = stores error codes

4ch = 4c is the command that tells program to exit to dos, 4c is hex char, hence 4ch

Hello ENDP = telling hello procedure to end

tasm = assemble command, compiler?
"TASM "filename" = compiles
creates two files in directory hello.asm and HELLO.OBJ

alt + f, x, y = menu and save sequence

after you tasm, you tlink

tlink is a shell?

DB = databyte, DW = datawords

string is DB, collection of individual characters,  line of individual characters is DB

proc is where you stick procedures 

mov ax, @data
mov ds, ax == the startup code, must be first procedures.

4 general purpose registers, ax, dx, ~= ends with x.

@data loads your variables, example string

ds = data segment register.

OFFSET = address 

21h is the class of interrupts, 21h is the one for displaying simple messages, images has a different one, video intterupts is 10x.

09h= is the itnerrupt to display string in dos, prints characters until they come upon the $

int = interrupt 21h 

mov al, 0
mov ah, 4ch == is the ending code, must have to stop program. exit back to dos

last line of code has to be end nameofproceduretoexitfirst


lookup inline assembler java

change hello.asm 

print out a hard copy, email .asm file, on monday have hello.asm done. must have hard copy to be graded. pseudocode unneccesary but reccomended. due MONDAY.